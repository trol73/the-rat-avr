package ru.trolsoft.therat.arch.avr

import org.junit.jupiter.api.Test
import ru.trolsoft.therat.arch.ArgNumber
import ru.trolsoft.therat.arch.AsmArg
import ru.trolsoft.therat.arch.avr.ArgReg.*
import ru.trolsoft.therat.arch.avr.ArgRegPair.*
import ru.trolsoft.therat.arch.avr.AvrCmd.*
import ru.trolsoft.compiler.generator.BinaryOutput
import ru.trolsoft.compiler.generator.Endian
import kotlin.test.assertEquals


private fun compile(cmd: AvrCmd, vararg args: AsmArg): Int {
    val out =  BinaryOutput(Endian.LITTLE)
    out.gotoAddress(0)
    val sz = cmd.size(*args)
    out.reserve(sz)
    out.allocatePages()
    out.gotoAddress(0)
    cmd.compile(out, *args)
    val page = out.pages[0]
    if (sz == 4) {
//        val stream = ByteArrayOutputStream()
//        out.saveToIntelHex(stream, 16)
        return (page[0] shl 24) + (page[1] shl 16) + (page[2] shl 8) + page[3]
    }
    assertEquals(2, sz)
    return (page[0] shl 8) + page[1]
}


class AvrAssemblerTest {
    @Test fun testBinaryGeneral() {
        assertEquals(0x0000, compile(NOP))
        assertEquals(0x0894, compile(SEC))
        assertEquals(0x8894, compile(CLC))
        assertEquals(0x2894, compile(SEN))
        assertEquals(0xA894, compile(CLN))
        assertEquals(0x1894, compile(SEZ))
        assertEquals(0x9894, compile(CLZ))
        assertEquals(0x7894, compile(SEI))
        assertEquals(0xF894, compile(CLI))
        assertEquals(0x4894, compile(SES))
        assertEquals(0xC894, compile(CLS))
        assertEquals(0x3894, compile(SEV))
        assertEquals(0xB894, compile(CLV))
        assertEquals(0x6894, compile(SET))
        assertEquals(0xE894, compile(CLT))
        assertEquals(0x5894, compile(SEH))
        assertEquals(0xD894, compile(CLH))
        assertEquals(0x8895, compile(SLEEP))
        assertEquals(0xA895, compile(WDR))
        assertEquals(0x0994, compile(IJMP))
        assertEquals(0x1994, compile(EIJMP))
        assertEquals(0x0995, compile(ICALL))
        assertEquals(0x1995, compile(EICALL))
        assertEquals(0x0895, compile(RET))
        assertEquals(0x1895, compile(RETI))
        assertEquals(0xE895, compile(SPM))
        assertEquals(0xF895, compile(ESPM))
        assertEquals(0x9895, compile(BREAK))

        assertEquals(0xC895, compile(LPM))
        assertEquals(0xA590, compile(LPM, R10, Z_PLUS))
        assertEquals(0xF491, compile(LPM, R31, Z))

        assertEquals(0xD895, compile(ELPM))
        assertEquals(0x4791, compile(ELPM, R20, Z_PLUS))
        assertEquals(0x5690, compile(ELPM, R5, Z))

        assertEquals(0x3894, compile(BSET, 3.toArg()))
        assertEquals(0xD894, compile(BCLR, 5.toArg()))
        assertEquals(0x0FEF, compile(SER, R16))
        assertEquals(0x1095, compile(COM, R17))
        assertEquals(0x1194, compile(NEG, R1))
        assertEquals(0x2394, compile(INC, R2))
        assertEquals(0x3A94, compile(DEC, R3))
        assertEquals(0x4694, compile(LSR, R4))
        assertEquals(0x5794, compile(ROR, R5))
        assertEquals(0x6594, compile(ASR, R6))
        assertEquals(0x7294, compile(SWAP, R7))
        assertEquals(0x8F92, compile(PUSH, R8))
        assertEquals(0x9F90, compile(POP, R9))
        assertEquals(0xAA20, compile(TST, R10))
        assertEquals(0xbb23, compile(TST, R27))
        assertEquals(0xBB24, compile(CLR, R11))
        assertEquals(0xCC0C, compile(LSL, R12))
        assertEquals(0xDD1C, compile(ROL, R13))
        assertEquals(0x09F0, compile(BREQ, 1.toArg()))
        assertEquals(0x09F0, compile(BREQ, 1.toArg()))
        assertEquals(0x09F4, compile(BRNE, 1.toArg()))
        assertEquals(0x08F0, compile(BRCS, 1.toArg()))
        assertEquals(0x08F4, compile(BRCC, 1.toArg()))
        assertEquals(0x08F4, compile(BRSH, 1.toArg()))
        assertEquals(0x08F0, compile(BRLO, 1.toArg()))
        assertEquals(0x0AF0, compile(BRMI, 1.toArg()))
        assertEquals(0x0AF4, compile(BRPL, 1.toArg()))
        assertEquals(0x0CF4, compile(BRGE, 1.toArg()))
        assertEquals(0x0CF0, compile(BRLT, 1.toArg()))
        assertEquals(0x0DF0, compile(BRHS, 1.toArg()))
        assertEquals(0x0DF4, compile(BRHC, 1.toArg()))
        assertEquals(0x0EF0, compile(BRTS, 1.toArg()))
        assertEquals(0x0EF4, compile(BRTC, 1.toArg()))
        assertEquals(0x0BF0, compile(BRVS, 1.toArg()))
        assertEquals(0x0BF4, compile(BRVC, 1.toArg()))
        assertEquals(0x0FF0, compile(BRIE, 1.toArg()))
        assertEquals(0x0FF4, compile(BRID, 1.toArg()))
        assertEquals(0x01C0, compile(RJMP, 1.toArg()))
        assertEquals(0xFECF, compile(RJMP, (-2).toArg()))
        assertEquals(0x01D0, compile(RCALL, 1.toArg()))
        assertEquals(0xFEDF, compile(RCALL, (-2).toArg()))
        assertEquals(0x0C940300, compile(JMP, 3.toArg()))
        assertEquals(0x0E940300, compile(CALL, 3.toArg()))

        assertEquals(0x0BF0, compile(BRBS, ArgNumber(3), 1.toArg()))
        assertEquals(0xF3F3, compile(BRBS, ArgNumber(3), (-2).toArg()))
        assertEquals(0x0BF4, compile(BRBC, ArgNumber(3), 1.toArg()))
        assertEquals(0xF3F7, compile(BRBC, ArgNumber(3), (-2).toArg()))

        assertEquals(0x140E, compile(ADD, R1, R20))
        assertEquals(0xF01D, compile(ADC, R31, R0))
        assertEquals(0x1A18, compile(SUB, R1, R10))
        assertEquals(0xD90A, compile(SBC, R13, R25))
        assertEquals(0x3520, compile(AND, R3, R5))
        assertEquals(0xbb23, compile(AND, R27, R27))
        assertEquals(0x7D2B, compile(OR, R23, R29))
        assertEquals(0x7025, compile(EOR, R23, R0))
        assertEquals(0x7B14, compile(CP, R7, R11))
        assertEquals(0x1805, compile(CPC, R17, R8))
        assertEquals(0x9212, compile(CPSE, R9, R18))
        assertEquals(0x732D, compile(MOV, R23, R3))
        assertEquals(0x4E9E, compile(MUL, R4, R30))
        assertEquals(0x5F01, compile(MOVW, R11_R10, R31_R30))
        assertEquals(0x4E02, compile(MULS, R20, R30))
        assertEquals(0x2703, compile(MULSU, R18, R23))
        assertEquals(0x4D03, compile(FMUL, R20, R21))
        assertEquals(0xD303, compile(FMULS, R21, R19))
        assertEquals(0xF803, compile(FMULSU, R23, R16))
        assertEquals(0x0196, compile(ADIW, R25_R24, 1.toArg()))
        assertEquals(0xE297, compile(SBIW, R29_R28, 50.toArg()))
        assertEquals(0x0456, compile(SUBI, R16, 100.toArg()))
        assertEquals(0xDD59, compile(SUBI, R29, (-99).toArg()))
        assertEquals(0x1A40, compile(SBCI, R17, 10.toArg()))
        assertEquals(0x2E71, compile(ANDI, R18, 30.toArg()))
        assertEquals(0x3466, compile(ORI, R19, 100.toArg()))
        assertEquals(0x4560, compile(SBR, R20, 5.toArg()))
        assertEquals(0xEB39, compile(CPI, R30, 155.toArg()))
        assertEquals(0xFBEC, compile(LDI, R31, 203.toArg()))
        assertEquals(0xD478, compile(CBR, R29, 123.toArg()))
        assertEquals(0x31FC, compile(SBRC, R3, 1.toArg()))
        assertEquals(0xB5FE, compile(SBRS, R11, 5.toArg()))
        assertEquals(0x56FB, compile(BST, R21, 6.toArg()))
        assertEquals(0xF7F9, compile(BLD, R31, 7.toArg()))
        assertEquals(0xBAB0, compile(IN, R11, 10.toArg()))
        assertEquals(0xD5B9, compile(OUT, 5.toArg(), R29))
        assertEquals(0x5199, compile(SBIC, 10.toArg(), 1.toArg()))
        assertEquals(0xA29B, compile(SBIS, 20.toArg(), 2.toArg()))
        assertEquals(0xF39A, compile(SBI, 30.toArg(), 3.toArg()))
        assertEquals(0x2C98, compile(CBI, 5.toArg(), 4.toArg()))
        assertEquals(0x40916400, compile(LDS, R20, 100.toArg()))
        assertEquals(0xB0923412, compile(STS, 0x1234.toArg(), R11).toLong() and 0xffffffff)

        assertEquals(0xBC90, compile(LD, R11, X))
        assertEquals(0xCD90, compile(LD, R12, X_PLUS))
        assertEquals(0xDE90, compile(LD, R13, MINUS_X))
        assertEquals(0x5881, compile(LD, R21, Y))
        assertEquals(0x6991, compile(LD, R22, Y_PLUS))
        assertEquals(0x7A91, compile(LD, R23, MINUS_Y))
        assertEquals(0xF081, compile(LD, R31, Z))
        assertEquals(0xE191, compile(LD, R30, Z_PLUS))
        assertEquals(0xD291, compile(LD, R29, MINUS_Z))

        assertEquals(0x1C92, compile(ST, X, R1))
        assertEquals(0x3D92, compile(ST, X_PLUS, R3))
        assertEquals(0x5E92, compile(ST, MINUS_X, R5))
        assertEquals(0xA882, compile(ST, Y, R10))
        assertEquals(0xF992, compile(ST, Y_PLUS, R15))
        assertEquals(0x3A93, compile(ST, MINUS_Y, R19))
        assertEquals(0x9083, compile(ST, Z, R25))
        assertEquals(0xB193, compile(ST, Z_PLUS, R27))
        assertEquals(0xC293, compile(ST, MINUS_Z, R28))

        assertEquals(0xDDA0, compile(LDD, R13, ArgOffsetPair(Y, 37)))
        assertEquals(0x7385, compile(LDD, R23, ArgOffsetPair(Z, 11)))

        assertEquals(0xB98A, compile(STD, ArgOffsetPair(Y, 17), R11))
        assertEquals(0x658B, compile(STD, ArgOffsetPair(Z, 21), R22))
    }
}

private fun Int.toArg(): ArgNumber = ArgNumber(this)